name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  VSCODE_VERSION: '1.74.0'

jobs:
  # Unit and Integration Tests
  test-unit-integration:
    name: Unit & Integration Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18.x', '20.x']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile TypeScript
      run: npm run compile

    - name: Lint code
      run: npm run lint

    - name: Run unit tests
      run: npm run test:unit
      env:
        RUN_UNIT_TESTS: true
        RUN_INTEGRATION_TESTS: false
        RUN_E2E_TESTS: false
        RUN_PERFORMANCE_TESTS: false
        TEST_TIMEOUT: 10000
        TEST_RETRIES: 2

    - name: Run integration tests
      run: npm run test:integration
      env:
        RUN_UNIT_TESTS: false
        RUN_INTEGRATION_TESTS: true
        RUN_E2E_TESTS: false
        RUN_PERFORMANCE_TESTS: false
        TEST_TIMEOUT: 15000
        TEST_RETRIES: 3

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.node-version }}
        path: |
          test-results.xml
          coverage/
        retention-days: 30

  # End-to-End Tests
  test-e2e:
    name: End-to-End Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile TypeScript
      run: npm run compile

    - name: Setup VS Code for testing
      run: |
        npm install -g @vscode/test-cli
        code --install-extension ms-vscode.vscode-typescript-next

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        RUN_UNIT_TESTS: false
        RUN_INTEGRATION_TESTS: false
        RUN_E2E_TESTS: true
        RUN_PERFORMANCE_TESTS: false
        TEST_TIMEOUT: 30000
        TEST_RETRIES: 2
        DISPLAY: ':99.0'
      timeout-minutes: 20

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-results-${{ matrix.os }}
        path: |
          e2e-results.xml
          screenshots/
        retention-days: 30

  # Performance Tests
  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile TypeScript
      run: npm run compile

    - name: Run performance tests
      run: npm run test:performance
      env:
        RUN_UNIT_TESTS: false
        RUN_INTEGRATION_TESTS: false
        RUN_E2E_TESTS: false
        RUN_PERFORMANCE_TESTS: true
        TEST_TIMEOUT: 60000
        TEST_RETRIES: 1
        NODE_OPTIONS: '--max-old-space-size=4096'

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          performance-results.json
          memory-usage.log
        retention-days: 30

  # Code Coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [test-unit-integration]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile TypeScript
      run: npm run compile

    - name: Run tests with coverage
      run: npm run test:coverage
      env:
        TEST_COVERAGE: true
        RUN_UNIT_TESTS: true
        RUN_INTEGRATION_TESTS: true
        RUN_E2E_TESTS: false
        RUN_PERFORMANCE_TESTS: false

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-results
        path: coverage/
        retention-days: 30

  # Cross-IDE Compatibility Tests
  test-cross-ide:
    name: Cross-IDE Compatibility
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ide: ['vscode', 'cursor', 'windsurf']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile TypeScript
      run: npm run compile

    - name: Run compatibility tests
      run: npm run test:compatibility
      env:
        TARGET_IDE: ${{ matrix.ide }}
        TEST_TIMEOUT: 20000

    - name: Upload compatibility results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: compatibility-results-${{ matrix.ide }}
        path: |
          compatibility-results.xml
        retention-days: 30

  # Security and Quality Checks
  security-quality:
    name: Security & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Run dependency check
      run: npx depcheck

    - name: Run TypeScript strict checks
      run: npx tsc --noEmit --strict

    - name: Run ESLint with strict rules
      run: npx eslint src --ext .ts --max-warnings 0

    - name: Check for circular dependencies
      run: npx madge --circular --extensions ts src/

    - name: Bundle size analysis
      run: |
        npm run package
        ls -la dist/
        echo "Extension bundle size:"
        du -h dist/extension.js

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [test-unit-integration, test-e2e, test-performance, coverage, test-cross-ide]
    if: always()
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v4
      with:
        path: test-artifacts

    - name: Generate test summary
      run: |
        echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Status" >> $GITHUB_STEP_SUMMARY
        echo "- Unit & Integration Tests: ${{ needs.test-unit-integration.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- End-to-End Tests: ${{ needs.test-e2e.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Tests: ${{ needs.test-performance.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Code Coverage: ${{ needs.coverage.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Cross-IDE Compatibility: ${{ needs.test-cross-ide.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "Test artifacts have been uploaded and are available for download." >> $GITHUB_STEP_SUMMARY

    - name: Check overall test status
      run: |
        if [[ "${{ needs.test-unit-integration.result }}" != "success" ]] || 
           [[ "${{ needs.test-e2e.result }}" != "success" ]] || 
           [[ "${{ needs.test-performance.result }}" != "success" ]] || 
           [[ "${{ needs.coverage.result }}" != "success" ]] || 
           [[ "${{ needs.test-cross-ide.result }}" != "success" ]]; then
          echo "❌ Some tests failed"
          exit 1
        else
          echo "✅ All tests passed"
        fi

  # Nightly Performance Regression Tests
  nightly-performance:
    name: Nightly Performance Regression
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile TypeScript
      run: npm run compile

    - name: Run extended performance tests
      run: npm run test:performance:extended
      env:
        RUN_PERFORMANCE_TESTS: true
        TEST_TIMEOUT: 300000  # 5 minutes
        PERFORMANCE_ITERATIONS: 100
        MEMORY_LIMIT: 512MB

    - name: Compare with baseline
      run: |
        # Compare current performance with baseline
        node scripts/compare-performance.js

    - name: Upload performance regression results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: nightly-performance-results
        path: |
          performance-regression.json
          performance-trends.html
        retention-days: 90

    - name: Create performance issue if regression detected
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Performance Regression Detected',
            body: 'Nightly performance tests detected a regression. Please check the artifacts for details.',
            labels: ['performance', 'regression', 'automated']
          });