name: Cross-Platform Compatibility Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  test-compatibility:
    name: Test on ${{ matrix.os }} with Node ${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript type checking
      run: npm run check-types
      
    - name: Run linting
      run: npm run lint
      
    - name: Build extension
      run: npm run compile
      
    - name: Run unit tests
      run: npm test
      
    - name: Test platform compatibility
      run: npm run validate:cross-platform
      
    - name: Test IDE compatibility
      run: npm run test:compatibility
      
    - name: Package extension
      run: npm run package
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: extension-${{ matrix.os }}-node${{ matrix.node-version }}
        path: dist/
        retention-days: 7

  test-packaging:
    name: Test Extension Packaging
    runs-on: ubuntu-latest
    needs: test-compatibility
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install packaging tools
      run: |
        npm install -g @vscode/vsce ovsx
        
    - name: Build extension
      run: npm run package
      
    - name: Test VS Code packaging
      run: npm run package:vscode
      
    - name: Test Open VSX packaging
      run: npm run package:ovsx
      
    - name: Test cross-platform packaging
      run: npm run package:cross-platform
      
    - name: Validate packages
      run: |
        ls -la packages/
        file packages/*.vsix
        
    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: extension-packages
        path: packages/
        retention-days: 30

  test-ide-compatibility:
    name: Test IDE Compatibility
    runs-on: ubuntu-latest
    needs: test-compatibility
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build extension
      run: npm run package
      
    - name: Test VS Code API compatibility
      run: |
        echo "Testing VS Code API compatibility..."
        node -e "
          const pkg = require('./package.json');
          const minVersion = pkg.engines.vscode;
          console.log('Required VS Code version:', minVersion);
          
          // Validate version format
          if (!minVersion.match(/^\^?\d+\.\d+\.\d+$/)) {
            throw new Error('Invalid version format');
          }
          
          console.log('‚úÖ VS Code version format is valid');
        "
        
    - name: Validate Open VSX compatibility
      run: |
        echo "Validating Open VSX Registry compatibility..."
        node -e "
          const pkg = require('./package.json');
          const required = ['name', 'version', 'publisher', 'engines', 'license', 'repository'];
          const missing = required.filter(field => !pkg[field]);
          
          if (missing.length > 0) {
            throw new Error('Missing required fields: ' + missing.join(', '));
          }
          
          console.log('‚úÖ All required Open VSX fields are present');
        "
        
    - name: Test extension manifest
      run: |
        echo "Testing extension manifest..."
        node -e "
          const pkg = require('./package.json');
          
          // Check activation events
          if (!pkg.activationEvents || pkg.activationEvents.length === 0) {
            throw new Error('No activation events defined');
          }
          
          // Check contributes section
          if (!pkg.contributes) {
            throw new Error('No contributes section defined');
          }
          
          // Check main entry point
          if (!pkg.main) {
            throw new Error('No main entry point defined');
          }
          
          console.log('‚úÖ Extension manifest is valid');
        "

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-compatibility
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for known vulnerabilities
      run: |
        echo "Checking for known vulnerabilities..."
        npx audit-ci --moderate
        
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: test-compatibility
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build extension
      run: npm run package
      
    - name: Test bundle size
      run: |
        echo "Checking bundle size..."
        BUNDLE_SIZE=$(stat -c%s "dist/extension.js")
        MAX_SIZE=$((5 * 1024 * 1024))  # 5MB limit
        
        echo "Bundle size: $BUNDLE_SIZE bytes"
        echo "Maximum allowed: $MAX_SIZE bytes"
        
        if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
          echo "‚ùå Bundle size exceeds limit"
          exit 1
        else
          echo "‚úÖ Bundle size is within limits"
        fi
        
    - name: Test memory usage
      run: |
        echo "Testing memory usage during build..."
        /usr/bin/time -v npm run compile 2>&1 | grep "Maximum resident set size"

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-compatibility, test-packaging, test-ide-compatibility, security-scan, performance-test]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Cross-platform compatibility testing completed"
        echo "Results:"
        echo "- Compatibility tests: ${{ needs.test-compatibility.result }}"
        echo "- Packaging tests: ${{ needs.test-packaging.result }}"
        echo "- IDE compatibility: ${{ needs.test-ide-compatibility.result }}"
        echo "- Security scan: ${{ needs.security-scan.result }}"
        echo "- Performance test: ${{ needs.performance-test.result }}"
        
        if [[ "${{ needs.test-compatibility.result }}" == "success" && 
              "${{ needs.test-packaging.result }}" == "success" && 
              "${{ needs.test-ide-compatibility.result }}" == "success" && 
              "${{ needs.security-scan.result }}" == "success" && 
              "${{ needs.performance-test.result }}" == "success" ]]; then
          echo "üéâ All tests passed! Extension is ready for cross-IDE deployment."
        else
          echo "‚ö†Ô∏è Some tests failed. Please review the results."
          exit 1
        fi